{"version":3,"sources":["node_modules/@emailjs/browser/es/store/store.js","node_modules/@emailjs/browser/es/methods/init/init.js","node_modules/@emailjs/browser/es/utils/validateParams.js","node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","node_modules/@emailjs/browser/es/api/sendPost.js","node_modules/@emailjs/browser/es/methods/send/send.js","node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","node_modules/@emailjs/browser/es/index.js","assets/js/email.js"],"names":["store","_origin","init","publicKey","origin","_userID","validateParams","serviceID","templateID","EmailJSResponseStatus","httpResponse","status","text","responseText","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","target","responseStatus","open","Object","keys","forEach","key","setRequestHeader","send","templatePrams","uID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","findHTMLForm","form","currentForm","document","querySelector","nodeName","sendForm","formData","FormData","append","getElementById","name","organization","email","mobile","content","agree","btn","checkMobileFormat","e","keyCode","preventDefault","sendEmail","checked","value","then","alert","err"],"mappings":"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","file":"email.0bc2e606.js","sourceRoot":"..","sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","import { store } from '../../store/store';\n/**\n * Initiation\n * @param {string} publicKey - set the EmailJS public key\n * @param {string} origin - set the EmailJS origin\n */\nexport const init = (publicKey, origin = 'https://api.emailjs.com') => {\n    store._userID = publicKey;\n    store._origin = origin;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse ? httpResponse.status : 0;\n        this.text = httpResponse ? httpResponse.responseText : 'Network Error';\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, publicKey) => {\n    const uID = publicKey || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.10.0',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, publicKey) => {\n    const uID = publicKey || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.10.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { init, sendForm } from \"@emailjs/browser\";\r\n\r\ninit(\"init\");\r\n\r\nconst form = document.getElementById(\"form\");\r\nconst name = document.querySelector(\"#name\");\r\nconst organization = document.querySelector(\"#organization\");\r\nconst email = document.querySelector(\"#email\");\r\nconst mobile = document.querySelector(\"#mobile\");\r\nconst content = document.querySelector(\"#content\");\r\nconst agree = document.querySelector(\"#agree\");\r\nconst btn = document.getElementById(\"submit_button\");\r\n\r\nconst checkMobileFormat = (e) => {\r\n  const keyCode = e.keyCode;\r\n  if (keyCode > 58 || keyCode < 47) e.preventDefault();\r\n};\r\n\r\nconst sendEmail = (e) => {\r\n  e.preventDefault();\r\n\r\n  if (!agree.checked) {\r\n    alert(\"개인정보 수집 이용 약관에 동의해주세요.\");\r\n    return;\r\n  }\r\n\r\n  btn.value = \"Sending...\";\r\n\r\n  const templateID = \"templateID\";\r\n  const serviceID = \"serviceID\";\r\n\r\n  sendForm(serviceID, templateID, \"#form\").then(\r\n    () => {\r\n      btn.value = \"문의 내용 전송하기\";\r\n      alert(\"이메일 전송이 완료되었습니다.\");\r\n      name.value = \"\";\r\n      organization.value = \"\";\r\n      email.value = \"\";\r\n      mobile.value = \"\";\r\n      content.value = \"\";\r\n      agree.checked = false;\r\n    },\r\n    (err) => {\r\n      btn.value = \"문의 내용 전송하기\";\r\n      alert(JSON.stringify(err));\r\n    }\r\n  );\r\n};\r\n\r\nform.addEventListener(\"submit\", sendEmail);\r\nmobile.addEventListener(\"keypress\", checkMobileFormat);\r\n"]}